import HandleBars from 'handlebars'
import { ADDITIONAL_TYPES, AdditionalModuleWrapper, DYNAMIC_TYPES, DynamicItem, DynamicItemDynamicWrapper, LiveRoomInfo, MAJOR_TYPES, RENDER_TYPES, RichTextNode } from './bean'

type TemplateReader = (path: string) => Promise<string>

interface CompileResult {
    html: string
    css: string
}

/**
 * dynamic 渲染函数映射
 */
const dynamicRenders = new Map<DYNAMIC_TYPES, (item: DynamicItem, forward: boolean) => string>()
const moduleDynamicRenders = new Map<MAJOR_TYPES, (module: DynamicItemDynamicWrapper) => string>()
const moduleAdditionalRenders = new Map<string, (item: AdditionalModuleWrapper) => string>()

const registerDynamic = (name: DYNAMIC_TYPES | DYNAMIC_TYPES[], handler: (item: DynamicItem, forward: boolean) => string) => {
    if(typeof name === 'string') {
        dynamicRenders.set(name, handler)
    } else {
        name.forEach(n => {
            dynamicRenders.set(n, handler)
        })
    }
}
const registerModuleDynamic = (name: MAJOR_TYPES | MAJOR_TYPES[], handler: (module: DynamicItemDynamicWrapper) => string) => {
    if(typeof name === 'string') {
        moduleDynamicRenders.set(name, handler)
    } else {
        name.forEach(n => {
            moduleDynamicRenders.set(n, handler)
        })
    }
}
const registerModuleAdditional = (name: ADDITIONAL_TYPES | ADDITIONAL_TYPES[], handler: (item: AdditionalModuleWrapper) => string) => {
    if(typeof name === 'string') {
        moduleAdditionalRenders.set(name, handler)
    } else {
        name.forEach(n => {
            moduleAdditionalRenders.set(n, handler)
        })
    }
}


function renderTextNodes(richTextNodes: RichTextNode[]) {
    if(richTextNodes.length === 0) return ''
    let text = richTextNodes.map((node) => {
        switch (node.type) {
            case 'RICH_TEXT_NODE_TYPE_EMOJI':
                return `<img style="margin-bottom: -5px; width:28px; height:28px;" src="${node.emoji.icon_url}"/>`
            case 'RICH_TEXT_NODE_TYPE_AT':
            case 'RICH_TEXT_NODE_TYPE_TOPIC':
                return`<span style="color: #00A0D8">${node.text}</span>`
            case 'RICH_TEXT_NODE_TYPE_LOTTERY':
                return `<svg style="margin-bottom: -5px; width: 22px; height: 22px; color: #00A0D8" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 22 22" width="22" height="22"><path d="M4.1249725 10.892791666666666C4.401121666666666 10.892791666666666 4.6249725 11.1166 4.6249725 11.392791666666666L4.6249725 16.892791666666664C4.6249725 17.59294166666667 5.1926175 18.16058333333333 5.892828333333333 18.16058333333333L16.107116666666666 18.16058333333333C16.80735 18.16058333333333 17.374999999999996 17.59294166666667 17.374999999999996 16.892791666666664L17.374999999999996 11.392791666666666C17.374999999999996 11.1166 17.598808333333334 10.892791666666666 17.875 10.892791666666666C18.151108333333333 10.892791666666666 18.375 11.1166 18.375 11.392791666666666L18.375 16.892791666666664C18.375 18.145241666666667 17.35965 19.16058333333333 16.107116666666666 19.16058333333333L5.892828333333333 19.16058333333333C4.640328333333334 19.16058333333333 3.6249724999999997 18.145241666666667 3.6249724999999997 16.892791666666664L3.6249724999999997 11.392791666666666C3.6249724999999997 11.1166 3.8488325000000003 10.892791666666666 4.1249725 10.892791666666666z" fill="currentColor"></path><path d="M2.8392608333333333 8.0535675C2.8392608333333333 7.126520833333333 3.5907816666666665 6.374999999999999 4.517828333333333 6.374999999999999L17.482116666666666 6.374999999999999C18.40915 6.374999999999999 19.160675 7.126520833333333 19.160675 8.0535675L19.160675 9.809341666666667C19.160675 10.625725 18.566341666666666 11.337641666666666 17.725475 11.422875C16.56895833333333 11.540091666666665 14.390741666666667 11.696441666666665 11 11.696441666666665C7.609239999999998 11.696441666666665 5.431005000000001 11.540091666666665 4.2745049999999996 11.422875C3.4335991666666668 11.337641666666666 2.8392608333333333 10.625725 2.8392608333333333 9.809341666666667L2.8392608333333333 8.0535675zM4.517828333333333 7.374999999999999C4.143070833333333 7.374999999999999 3.8392608333333333 7.67881 3.8392608333333333 8.0535675L3.8392608333333333 9.809341666666667C3.8392608333333333 10.14125 4.071879166666666 10.397183333333334 4.375326666666667 10.427975C5.495405 10.541491666666666 7.6398399999999995 10.696441666666667 11 10.696441666666667C14.360141666666665 10.696441666666667 16.504558333333332 10.541491666666666 17.624583333333334 10.427975C17.928075 10.397183333333334 18.160674999999998 10.14125 18.160674999999998 9.809341666666667L18.160674999999998 8.0535675C18.160674999999998 7.67881 17.856849999999998 7.374999999999999 17.482116666666666 7.374999999999999L4.517828333333333 7.374999999999999z" fill="currentColor"></path><path d="M6.178549166666666 4.910775833333333C6.178549166666666 3.5497883333333333 7.281840833333334 2.4464966666666665 8.642828333333332 2.4464966666666665C10.003858333333332 2.4464966666666665 11.107116666666666 3.5497883333333333 11.107116666666666 4.910775833333333L11.107116666666666 7.375064166666665L8.642828333333332 7.375064166666665C7.281840833333334 7.375064166666665 6.178549166666666 6.2717633333333325 6.178549166666666 4.910775833333333zM8.642828333333332 3.4464966666666665C7.83413 3.4464966666666665 7.1785491666666665 4.102077499999999 7.1785491666666665 4.910775833333333C7.1785491666666665 5.719483333333334 7.83413 6.375064166666666 8.642828333333332 6.375064166666666L10.107116666666668 6.375064166666666L10.107116666666668 4.910775833333333C10.107116666666668 4.102077499999999 9.451558333333335 3.4464966666666665 8.642828333333332 3.4464966666666665z" fill="currentColor"></path><path d="M10.892791666666666 4.910775833333333C10.892791666666666 3.5497883333333333 11.996133333333333 2.4464966666666665 13.357116666666666 2.4464966666666665C14.718099999999998 2.4464966666666665 15.821441666666669 3.5497883333333333 15.821441666666669 4.910775833333333C15.821441666666669 6.2717633333333325 14.718099999999998 7.375064166666665 13.357116666666666 7.375064166666665L10.892791666666666 7.375064166666665L10.892791666666666 4.910775833333333zM13.357116666666666 3.4464966666666665C12.548433333333332 3.4464966666666665 11.892791666666666 4.102077499999999 11.892791666666666 4.910775833333333L11.892791666666666 6.375064166666666L13.357116666666666 6.375064166666666C14.165799999999999 6.375064166666666 14.821441666666667 5.719483333333334 14.821441666666667 4.910775833333333C14.821441666666667 4.102077499999999 14.165799999999999 3.4464966666666665 13.357116666666666 3.4464966666666665z" fill="currentColor"></path><path d="M11 5.392764166666666C11.276108333333331 5.392764166666666 11.499999999999998 5.6166149999999995 11.499999999999998 5.892764166666666L11.499999999999998 18.071350000000002C11.499999999999998 18.347458333333332 11.276108333333331 18.571350000000002 11 18.571350000000002C10.723808333333334 18.571350000000002 10.5 18.347458333333332 10.5 18.071350000000002L10.5 5.892764166666666C10.5 5.6166149999999995 10.723808333333334 5.392764166666666 11 5.392764166666666z" fill="currentColor"></path></svg><span style="color: #00A0D8;">${node.text}</span>`
            case 'RICH_TEXT_NODE_TYPE_BV':
                return `<span style="color: #00A0D8"><svg style="margin-bottom: -5px; width:20px;height:20px;" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 20 20" width="20" height="20"><path d="M10 2.9150416666666668C6.087983333333334 2.9150416666666668 2.916666666666667 6.086358333333334 2.916666666666667 9.998333333333333C2.916666666666667 13.910375000000002 6.087983333333334 17.081666666666667 10 17.081666666666667C13.912000000000003 17.081666666666667 17.083333333333336 13.910375000000002 17.083333333333336 9.998333333333333C17.083333333333336 6.086358333333334 13.912000000000003 2.9150416666666668 10 2.9150416666666668zM1.6666666666666667 9.998333333333333C1.6666666666666667 5.396 5.397625000000001 1.6650416666666668 10 1.6650416666666668C14.602374999999999 1.6650416666666668 18.333333333333336 5.396 18.333333333333336 9.998333333333333C18.333333333333336 14.600750000000001 14.602374999999999 18.331666666666667 10 18.331666666666667C5.397625000000001 18.331666666666667 1.6666666666666667 14.600750000000001 1.6666666666666667 9.998333333333333z" fill="currentColor"></path><path d="M12.708333333333334 9.278333333333334C13.263875 9.599041666666668 13.263875 10.400916666666667 12.708333333333334 10.721708333333334L9.270875 12.706333333333333C8.715291666666667 13.027083333333334 8.020841666666668 12.626125000000002 8.020841666666668 11.984666666666667L8.020841666666668 8.015366666666667C8.020841666666668 7.373866666666666 8.715291666666667 6.972925 9.270875 7.2936749999999995L12.708333333333334 9.278333333333334z" fill="currentColor"></path></svg>${node.text}</span>`
            case "RICH_TEXT_NODE_TYPE_TEXT":
                return node.text
            default:
                console.warn(`未知富文本类型: ${node.type}`)
                return ''
        }
    }).join('')
    text = text.replace(/\n/g, '<br>')
    return `
        <div class="card-details">
            ${text}
        </div>
    `
}

function renderImgSet(imgs: string[]){
    if(imgs.length === 0) return ''
    let major = ''
    if(imgs.length === 1){
        major += `<img class="single-photo-item" src="${imgs[0]}"/>`
    } else if(imgs.length === 4){
        major += imgs.reduce((acc, cV) => {
            return acc + `<img class="four-photo-item" src="${cV}"/>`
        }, '')
    } else {
        major += imgs.reduce((acc, cV) => {
            return acc + `<img class="photo-item" src="${cV}"/>`
        }, '')
    }
    return `
        <div class="card-major">
            ${major}
        </div>
    `
}

const renderDynamic = (item: DynamicItem, forward: boolean) => {
    const handler = dynamicRenders.get(item.type as DYNAMIC_TYPES)
    if(!handler) {
        console.error('找不到对应的动态渲染函数，类型', item.type)
        return ''
    }
    return handler(item, forward)
}

const renderModuleDynamic = (module: DynamicItemDynamicWrapper) => {
    if(module.major){
        const handler = moduleDynamicRenders.get(module.major.type as MAJOR_TYPES)
        if(!handler) {
            console.error('找不到对应的动态渲染函数，类型', module.major.type)
            return ''
        }
        return handler(module)
    } else {
        let result = ''

        if(module.desc) {
            // 渲染textnode
            result += renderTextNodes(module.desc.rich_text_nodes)
        }
        if(module.major && module.major.draw) {
            // 渲染图集
            const imgs = module.major.draw.items.map((item) => item.src)
            result += renderImgSet(imgs)
        }

        return result
    }
}

const renderAdditional = (item: AdditionalModuleWrapper) => {
    const handler = moduleAdditionalRenders.get(item.type)
    if(!handler) {
        console.error('找不到对应的动态渲染函数，类型', item.type)
        return ''
    }
    return handler(item)
}


export interface HandleBarsInstance {
    compileDynamic: (item: DynamicItem) => CompileResult
    compileLiveInfo: (item: LiveRoomInfo) => CompileResult
}


HandleBars.registerHelper('renderRichTextNode', (node: RichTextNode) => {
    switch (node.type) {
        case 'RICH_TEXT_NODE_TYPE_EMOJI':
            return `<img style="margin-bottom: -5px; width:28px; height:28px;" src="${node.emoji.icon_url}"/>`
        case 'RICH_TEXT_NODE_TYPE_AT':
        case 'RICH_TEXT_NODE_TYPE_TOPIC':
            return`<span style="color: #00A0D8">${node.text}</span>`
        case 'RICH_TEXT_NODE_TYPE_LOTTERY':
            return `<svg style="margin-bottom: -5px; width: 22px; height: 22px; color: #00A0D8" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 22 22" width="22" height="22"><path d="M4.1249725 10.892791666666666C4.401121666666666 10.892791666666666 4.6249725 11.1166 4.6249725 11.392791666666666L4.6249725 16.892791666666664C4.6249725 17.59294166666667 5.1926175 18.16058333333333 5.892828333333333 18.16058333333333L16.107116666666666 18.16058333333333C16.80735 18.16058333333333 17.374999999999996 17.59294166666667 17.374999999999996 16.892791666666664L17.374999999999996 11.392791666666666C17.374999999999996 11.1166 17.598808333333334 10.892791666666666 17.875 10.892791666666666C18.151108333333333 10.892791666666666 18.375 11.1166 18.375 11.392791666666666L18.375 16.892791666666664C18.375 18.145241666666667 17.35965 19.16058333333333 16.107116666666666 19.16058333333333L5.892828333333333 19.16058333333333C4.640328333333334 19.16058333333333 3.6249724999999997 18.145241666666667 3.6249724999999997 16.892791666666664L3.6249724999999997 11.392791666666666C3.6249724999999997 11.1166 3.8488325000000003 10.892791666666666 4.1249725 10.892791666666666z" fill="currentColor"></path><path d="M2.8392608333333333 8.0535675C2.8392608333333333 7.126520833333333 3.5907816666666665 6.374999999999999 4.517828333333333 6.374999999999999L17.482116666666666 6.374999999999999C18.40915 6.374999999999999 19.160675 7.126520833333333 19.160675 8.0535675L19.160675 9.809341666666667C19.160675 10.625725 18.566341666666666 11.337641666666666 17.725475 11.422875C16.56895833333333 11.540091666666665 14.390741666666667 11.696441666666665 11 11.696441666666665C7.609239999999998 11.696441666666665 5.431005000000001 11.540091666666665 4.2745049999999996 11.422875C3.4335991666666668 11.337641666666666 2.8392608333333333 10.625725 2.8392608333333333 9.809341666666667L2.8392608333333333 8.0535675zM4.517828333333333 7.374999999999999C4.143070833333333 7.374999999999999 3.8392608333333333 7.67881 3.8392608333333333 8.0535675L3.8392608333333333 9.809341666666667C3.8392608333333333 10.14125 4.071879166666666 10.397183333333334 4.375326666666667 10.427975C5.495405 10.541491666666666 7.6398399999999995 10.696441666666667 11 10.696441666666667C14.360141666666665 10.696441666666667 16.504558333333332 10.541491666666666 17.624583333333334 10.427975C17.928075 10.397183333333334 18.160674999999998 10.14125 18.160674999999998 9.809341666666667L18.160674999999998 8.0535675C18.160674999999998 7.67881 17.856849999999998 7.374999999999999 17.482116666666666 7.374999999999999L4.517828333333333 7.374999999999999z" fill="currentColor"></path><path d="M6.178549166666666 4.910775833333333C6.178549166666666 3.5497883333333333 7.281840833333334 2.4464966666666665 8.642828333333332 2.4464966666666665C10.003858333333332 2.4464966666666665 11.107116666666666 3.5497883333333333 11.107116666666666 4.910775833333333L11.107116666666666 7.375064166666665L8.642828333333332 7.375064166666665C7.281840833333334 7.375064166666665 6.178549166666666 6.2717633333333325 6.178549166666666 4.910775833333333zM8.642828333333332 3.4464966666666665C7.83413 3.4464966666666665 7.1785491666666665 4.102077499999999 7.1785491666666665 4.910775833333333C7.1785491666666665 5.719483333333334 7.83413 6.375064166666666 8.642828333333332 6.375064166666666L10.107116666666668 6.375064166666666L10.107116666666668 4.910775833333333C10.107116666666668 4.102077499999999 9.451558333333335 3.4464966666666665 8.642828333333332 3.4464966666666665z" fill="currentColor"></path><path d="M10.892791666666666 4.910775833333333C10.892791666666666 3.5497883333333333 11.996133333333333 2.4464966666666665 13.357116666666666 2.4464966666666665C14.718099999999998 2.4464966666666665 15.821441666666669 3.5497883333333333 15.821441666666669 4.910775833333333C15.821441666666669 6.2717633333333325 14.718099999999998 7.375064166666665 13.357116666666666 7.375064166666665L10.892791666666666 7.375064166666665L10.892791666666666 4.910775833333333zM13.357116666666666 3.4464966666666665C12.548433333333332 3.4464966666666665 11.892791666666666 4.102077499999999 11.892791666666666 4.910775833333333L11.892791666666666 6.375064166666666L13.357116666666666 6.375064166666666C14.165799999999999 6.375064166666666 14.821441666666667 5.719483333333334 14.821441666666667 4.910775833333333C14.821441666666667 4.102077499999999 14.165799999999999 3.4464966666666665 13.357116666666666 3.4464966666666665z" fill="currentColor"></path><path d="M11 5.392764166666666C11.276108333333331 5.392764166666666 11.499999999999998 5.6166149999999995 11.499999999999998 5.892764166666666L11.499999999999998 18.071350000000002C11.499999999999998 18.347458333333332 11.276108333333331 18.571350000000002 11 18.571350000000002C10.723808333333334 18.571350000000002 10.5 18.347458333333332 10.5 18.071350000000002L10.5 5.892764166666666C10.5 5.6166149999999995 10.723808333333334 5.392764166666666 11 5.392764166666666z" fill="currentColor"></path></svg><span style="color: #00A0D8;">${node.text}</span>`
        case 'RICH_TEXT_NODE_TYPE_BV':
            return `<span style="color: #00A0D8"><svg style="margin-bottom: -5px; width:20px;height:20px;" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 20 20" width="20" height="20"><path d="M10 2.9150416666666668C6.087983333333334 2.9150416666666668 2.916666666666667 6.086358333333334 2.916666666666667 9.998333333333333C2.916666666666667 13.910375000000002 6.087983333333334 17.081666666666667 10 17.081666666666667C13.912000000000003 17.081666666666667 17.083333333333336 13.910375000000002 17.083333333333336 9.998333333333333C17.083333333333336 6.086358333333334 13.912000000000003 2.9150416666666668 10 2.9150416666666668zM1.6666666666666667 9.998333333333333C1.6666666666666667 5.396 5.397625000000001 1.6650416666666668 10 1.6650416666666668C14.602374999999999 1.6650416666666668 18.333333333333336 5.396 18.333333333333336 9.998333333333333C18.333333333333336 14.600750000000001 14.602374999999999 18.331666666666667 10 18.331666666666667C5.397625000000001 18.331666666666667 1.6666666666666667 14.600750000000001 1.6666666666666667 9.998333333333333z" fill="currentColor"></path><path d="M12.708333333333334 9.278333333333334C13.263875 9.599041666666668 13.263875 10.400916666666667 12.708333333333334 10.721708333333334L9.270875 12.706333333333333C8.715291666666667 13.027083333333334 8.020841666666668 12.626125000000002 8.020841666666668 11.984666666666667L8.020841666666668 8.015366666666667C8.020841666666668 7.373866666666666 8.715291666666667 6.972925 9.270875 7.2936749999999995L12.708333333333334 9.278333333333334z" fill="currentColor"></path></svg>${node.text}</span>`
        case "RICH_TEXT_NODE_TYPE_TEXT":
            return node.text
        default:
            console.warn(`未知富文本类型: ${node.type}`)
            return ''
    }
})

async function generateTempFunc(path: string, readFunc: TemplateReader) {
    try {
        const rawContent = await readFunc(path)
        let tmpl = HandleBars.compile(rawContent)
        return tmpl
    } catch (e) {
        console.error('读取模板失败', e)
    }
}

export async function useHandlebars(rootPath: string, readFunc: TemplateReader): Promise<HandleBarsInstance> {
    // 不同 DYNAMIC_TYPE的处理方法

    
    const styleTmpl = await generateTempFunc(`${rootPath}/style.css`, readFunc)
    const majorArchiveTmpl = await generateTempFunc(`${rootPath}/dynamic/majorArchive.vue`, readFunc)
    const dynamicMainTmpl = await generateTempFunc(`${rootPath}/dynamic/main.vue`, readFunc)
    const additionalReserveTmpl = await generateTempFunc(`${rootPath}/dynamic/additionalReserved.vue`, readFunc)

    registerDynamic(['DYNAMIC_TYPE_WORD', 'DYNAMIC_TYPE_DRAW', 'DYNAMIC_TYPE_FORWARD'], (item, forward) => {
        // 先渲染本人消息的主体内容
        let content = renderModuleDynamic(item.modules.module_dynamic)
        // 如为转发，附加转发内容
        if(item.type === 'DYNAMIC_TYPE_FORWARD') {
            const forwardAuthor = item.orig.modules.module_author
            content += `
            <div class="card-forward">
                <div class="forward-userinfo">
                    <img class="forward-avatar" src="${forwardAuthor.face}" alt="avatar">
                    <span class="forward-username">${forwardAuthor.name}</span>
                </div>
                <div class="forward-main">
                    ${renderDynamic(item.orig, true)}
                </div>
            </div>
            `
        }
        // 如有附加内容，渲染
        const additional = item.modules.module_dynamic.additional
        if(additional) {
            content += renderAdditional(additional)
        }
        return content
    })

    registerDynamic([
        'DYNAMIC_TYPE_LIVE', 'DYNAMIC_TYPE_MEDIALIST',
        'DYNAMIC_TYPE_PGC', 'DYNAMIC_TYPE_ARTICLE', 
        'DYNAMIC_TYPE_MUSIC', 'DYNAMIC_TYPE_COMMON_SQUARE', 
        'DYNAMIC_TYPE_COURSES_SEASON', 'DYNAMIC_TYPE_UGC_SEASON', 
        'DYNAMIC_TYPE_NONE', 'DYNAMIC_TYPE_LIVE_RCMD'
    ], (item, forward) => {
        if (item.type === 'DYNAMIC_TYPE_LIVE_RCMD') {
            console.warn('开播动态，跳过渲染')
            throw new Error('开播动态，跳过渲染')
        }
        const typeMap = {
            'DYNAMIC_TYPE_LIVE': '直播预约',
            'DYNAMIC_TYPE_MEDIALIST': '收藏夹',
            'DYNAMIC_TYPE_PGC': '剧集',
            'DYNAMIC_TYPE_ARTICLE': '专栏',
            'DYNAMIC_TYPE_MUSIC': '歌曲',
            'DYNAMIC_TYPE_COMMON_SQUARE': '分享',
            'DYNAMIC_TYPE_COURSES_SEASON': '课程',
            'DYNAMIC_TYPE_UGC_SEASON': '合集',
            'DYNAMIC_TYPE_NONE': '失效动态'
        }
        return `${item.modules.module_author.name}发布了新的${typeMap[item.type]}, 请自行查看`
    })

    registerDynamic('DYNAMIC_TYPE_AV', (item, forward) => {
        return renderModuleDynamic(item.modules.module_dynamic)
    })

    registerModuleAdditional('ADDITIONAL_TYPE_RESERVE', (item) => {
        if(item.reserve)
            return additionalReserveTmpl(item)
        return ''  
    })

    registerModuleDynamic('MAJOR_TYPE_ARCHIVE', (item) => {
        return majorArchiveTmpl(item.major.archive)
    })
    registerModuleDynamic('MAJOR_TYPE_OPUS', (item) => {
        let content = ''
        if(item.major.opus.title){
            content += `<h3>${item.major.opus.title}</h3>`
        }
        content += renderTextNodes(item.major.opus.summary.rich_text_nodes)
        const imgs = item.major.opus.pics.map((item) => item.url)
        content += renderImgSet(imgs)
        return content
    })

    const compileDynamic = (item: DynamicItem): CompileResult => {
        console.log('编译动态中，类型', item.type)
        const result1 = renderDynamic(item, false)

        const result2 = dynamicMainTmpl({
            hasBorder: true,
            author: item.modules.module_author,
            mainContent: result1,
            stat: item.modules.module_stat,
            topic: item.modules.module_dynamic.topic?.name,
        })
        const result3 = styleTmpl({
            fontURL: '', //pathToFileURL(resolve(__dirname, '../src/font/HYZhengYuan-75W.ttf')),
            font: '',
            cardColorStart: '',
            cardColorEnd: '',
            dynamicCardColor: item.modules.module_author.decorate?.fan.color,
            dynamicCardUrl: item.modules.module_author.decorate?.card_url,
        })
        return {html: result2, css: result3}
    }
    const compileLiveInfo = (item: LiveRoomInfo): CompileResult => {
        return {html:  '', css:  ''}
    }
    return {
        compileDynamic,
        compileLiveInfo
    }
}